{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Practicalli Doom Emacs \u03bb\ufe0e Practicalli Doom Emacs is a guide to Clojure REPL Driven Development with Doom Emacs configuration and Practicalli customization. Doom is not aimed at Emacs beginners (unless the aim is to learn Emacs in more depth). There is limited official documentation, although there is a healthy community support. Looking for a batteries included approach? Practicalli Spacemacs and practicalli/spacemacs.d provide all the Emacs features needed for Clojure, with just two Git clone commands. Spacemacs is a community configuration for Emacs with a very large community and very detailed documentation. New Book - content published as learned Practicalli Doom Emacs was started in December 2022 with little knowledge of Doom Emacs, so is mostly a journal of things that have been learned as Practicalli tries to create an effective development workflow, especially with Clojure. Content will be added as new things are discovered to aid in the learning and effective use of Doom Emacs. Practicalli Doom Emacs configuration \u03bb\ufe0e practicalli/doom-emacs-config repository contains a customised configuration for Clojure development and supporting tools. Browse the repository online or fork / clone the repository Free Desktop XDG Config Classic Config git clone https://github.com/practicalli/doom-emacs-config.git $XDG_CONFIG_HOME /doom ` The above command creates ~/.config/doom/ that contains the configuration used in Practicalli Spacemacs book, all in one place. git clone https://github.com/practicalli/doom-emacs-config.git $HOME /.doom.d ` The above command creates the ~/.doom.d/ directory that contains the configuration used in Practicalli Spacemacs book, all in one place. REPL Driven Development \u03bb\ufe0e The REPL is the Clojure interactive environment used to create an run all code. You will quickly get a feel for Clojure by evaluating, breaking, fixing and extending code in the REPL, all the while getting instant feedback on what your code is doing. As we work through code we will discuss the concepts behind Clojure, including functional programming, \"pure\" functions and a stateless approach with persistent data structures, changing state safely, Java interoperability and tooling around Clojure. Resources \u03bb\ufe0e Practicalli Clojure for a practical introduction learning Clojure and provides practicalli/clojure-deps-edn configuration to add community tools and common aliases to Clojure CLI. Practicalli YouTube channel - 100+ hours of Clojure related videos Practicalli website blog, books and videos to support your journey into Clojure Discussions and feedback \u03bb\ufe0e Contributions are welcome via GitHub issues and pull requests , or discuss the book on the Clojurians Slack community. Get a free Clojurians slack community account Sponsor my work \u03bb\ufe0e The majority of my work is now focused on the Practicalli series of books and videos and an advisory role with several communities Thank you to Cognitect , Nubank and a wide range of other sponsors from the Clojure community for your continued support Creative commons license \u03bb\ufe0e This work is licensed under a Creative Commons Attribution 4.0 ShareAlike License (including images & stylesheets).","title":"Practicalli Doom Emacs"},{"location":"#practicalli-doom-emacs","text":"Practicalli Doom Emacs is a guide to Clojure REPL Driven Development with Doom Emacs configuration and Practicalli customization. Doom is not aimed at Emacs beginners (unless the aim is to learn Emacs in more depth). There is limited official documentation, although there is a healthy community support. Looking for a batteries included approach? Practicalli Spacemacs and practicalli/spacemacs.d provide all the Emacs features needed for Clojure, with just two Git clone commands. Spacemacs is a community configuration for Emacs with a very large community and very detailed documentation. New Book - content published as learned Practicalli Doom Emacs was started in December 2022 with little knowledge of Doom Emacs, so is mostly a journal of things that have been learned as Practicalli tries to create an effective development workflow, especially with Clojure. Content will be added as new things are discovered to aid in the learning and effective use of Doom Emacs.","title":"Practicalli Doom Emacs"},{"location":"#practicalli-doom-emacs-configuration","text":"practicalli/doom-emacs-config repository contains a customised configuration for Clojure development and supporting tools. Browse the repository online or fork / clone the repository Free Desktop XDG Config Classic Config git clone https://github.com/practicalli/doom-emacs-config.git $XDG_CONFIG_HOME /doom ` The above command creates ~/.config/doom/ that contains the configuration used in Practicalli Spacemacs book, all in one place. git clone https://github.com/practicalli/doom-emacs-config.git $HOME /.doom.d ` The above command creates the ~/.doom.d/ directory that contains the configuration used in Practicalli Spacemacs book, all in one place.","title":"Practicalli Doom Emacs configuration"},{"location":"#repl-driven-development","text":"The REPL is the Clojure interactive environment used to create an run all code. You will quickly get a feel for Clojure by evaluating, breaking, fixing and extending code in the REPL, all the while getting instant feedback on what your code is doing. As we work through code we will discuss the concepts behind Clojure, including functional programming, \"pure\" functions and a stateless approach with persistent data structures, changing state safely, Java interoperability and tooling around Clojure.","title":"REPL Driven Development"},{"location":"#resources","text":"Practicalli Clojure for a practical introduction learning Clojure and provides practicalli/clojure-deps-edn configuration to add community tools and common aliases to Clojure CLI. Practicalli YouTube channel - 100+ hours of Clojure related videos Practicalli website blog, books and videos to support your journey into Clojure","title":"Resources"},{"location":"#discussions-and-feedback","text":"Contributions are welcome via GitHub issues and pull requests , or discuss the book on the Clojurians Slack community. Get a free Clojurians slack community account","title":"Discussions and feedback"},{"location":"#sponsor-my-work","text":"The majority of my work is now focused on the Practicalli series of books and videos and an advisory role with several communities Thank you to Cognitect , Nubank and a wide range of other sponsors from the Clojure community for your continued support","title":"Sponsor my work"},{"location":"#creative-commons-license","text":"This work is licensed under a Creative Commons Attribution 4.0 ShareAlike License (including images & stylesheets).","title":"Creative commons license"},{"location":"assets/images/social/","text":"Social Cards \u03bb\ufe0e Social Cards are visual previews of the website that are included when sending links via social media platforms. Material for MkDocs is configured to generate beautiful social cards automatically , using the colors, fonts and logos defined in mkdocs.yml Generated images are stored in this directory.","title":"Social Cards"},{"location":"assets/images/social/#social-cards","text":"Social Cards are visual previews of the website that are included when sending links via social media platforms. Material for MkDocs is configured to generate beautiful social cards automatically , using the colors, fonts and logos defined in mkdocs.yml Generated images are stored in this directory.","title":"Social Cards"},{"location":"basics/","text":"Basic usage \u03bb\ufe0e Line numbers \u03bb\ufe0e Space t l toggles consecutive line numbers display-line-numbers-type set to relative for Vim-style relative numbers, to support jumping lines, e.g. 2 4 J Enable relative line numbers .config/doom/config.el ( setq display-line-numbers-type 'relative ) Enable features \u03bb\ufe0e .config/doom/init.el updated in practicalli/doom-emacs-config feature Description word-wrap soft wrapping with language-aware indent multiple-cursors editing in many places at once Personal information \u03bb\ufe0e ( setq auth-sources ' ( \"~/.authinfo.gpg\" ) auth-source-cache-expiry nil ) ; default is 7200 (2h) buffers \u03bb\ufe0e new buffers in org-mode than fundamntal-mode, hence ( setq-default major-mode 'org-mode ) Spacemacs to Doom Emacs \u03bb\ufe0e Layouts -> workspaces Adding a project seems to add a workspace SPC TAB . to switch between workspaces Multiple cursors \u03bb\ufe0e TODO: define key bindings for multiple cursors mc/edit-lines - create a cursor on every line in the visual selection region - g r I in Spacemacs mc/keyboard-quit - cancel multiple cursors - C-g Rename files \u03bb\ufe0e SPC f f add a space to the end of the name to ensure Emacs creates a new file rather than selecting the existing name... TODO: is this to be expected","title":"Basic usage"},{"location":"basics/#basic-usage","text":"","title":"Basic usage"},{"location":"basics/#line-numbers","text":"Space t l toggles consecutive line numbers display-line-numbers-type set to relative for Vim-style relative numbers, to support jumping lines, e.g. 2 4 J Enable relative line numbers .config/doom/config.el ( setq display-line-numbers-type 'relative )","title":"Line numbers"},{"location":"basics/#enable-features","text":".config/doom/init.el updated in practicalli/doom-emacs-config feature Description word-wrap soft wrapping with language-aware indent multiple-cursors editing in many places at once","title":"Enable features"},{"location":"basics/#personal-information","text":"( setq auth-sources ' ( \"~/.authinfo.gpg\" ) auth-source-cache-expiry nil ) ; default is 7200 (2h)","title":"Personal information"},{"location":"basics/#buffers","text":"new buffers in org-mode than fundamntal-mode, hence ( setq-default major-mode 'org-mode )","title":"buffers"},{"location":"basics/#spacemacs-to-doom-emacs","text":"Layouts -> workspaces Adding a project seems to add a workspace SPC TAB . to switch between workspaces","title":"Spacemacs to Doom Emacs"},{"location":"basics/#multiple-cursors","text":"TODO: define key bindings for multiple cursors mc/edit-lines - create a cursor on every line in the visual selection region - g r I in Spacemacs mc/keyboard-quit - cancel multiple cursors - C-g","title":"Multiple cursors"},{"location":"basics/#rename-files","text":"SPC f f add a space to the end of the name to ensure Emacs creates a new file rather than selecting the existing name... TODO: is this to be expected","title":"Rename files"},{"location":"basics/projects/","text":"Working with Projects \u03bb\ufe0e Space p a to add a new project to Doom, selecting the directory path for the root of the project. Space p p to switch to a project other than the current, list shows all other projects except current project. A project is automatically assigned a workspace when opened. Space Tab r TODO: How to delete a project Each project is automatically opened in a new workspace Space Tab ++full-stop++ to select a project workspace Space ++back-tick++ to switch to previous buffer Space Tab ++back-tick++ to switch to previous workspace TODO: paste kill ring cycle - paste transient state in spacemacs Discover projects \u03bb\ufe0e Space p D to discover projects withing the directories specified in projectile-project-search-path ( setq projectile-project-search-path ' (( \"~/projects\" . 2 ) ( \"~/.config\" . 1 ))) Files \u03bb\ufe0e Space u Space f f Space f f to open or create a new file. If a file is open in the current buffer, its path is used as the starting point. To create a file (and intermediate directories), type any additional path and file name. Space p f to list all files in the current project / workspace. Use this when you know the name of the project but not the path or to avoid navigating to the correct path. Project Cache Outdated Project cache should be refreshed when moving directories and files otherwise Doom may try to open a file from an old location Space u before a file command to clear the cache, e.g. Space u Space f f Windows \u03bb\ufe0e Space w and one of h j k l for vim-style navigation of windows Space w v to create a new vertical window, Space w h for a new horizontal window Sessions \u03bb\ufe0e spc q s to save the current session, which should load when (re)starting Emacs Searching across a project \u03bb\ufe0e Space / to search across all files in a project, using ripgrep (if installed on OS execution path) Search & Replace: C-cC-e after a search command to activate wgrep-mode. Now you may edit the results. Later, press C-cC-c (or ZZ , for evil users) to commit your changes. Ctrl + c + Ctrl + e opens search results in a separate buffer for editing results. Ctrl + c + Ctrl + c or Z Z to commit changes","title":"Projects"},{"location":"basics/projects/#working-with-projects","text":"Space p a to add a new project to Doom, selecting the directory path for the root of the project. Space p p to switch to a project other than the current, list shows all other projects except current project. A project is automatically assigned a workspace when opened. Space Tab r TODO: How to delete a project Each project is automatically opened in a new workspace Space Tab ++full-stop++ to select a project workspace Space ++back-tick++ to switch to previous buffer Space Tab ++back-tick++ to switch to previous workspace TODO: paste kill ring cycle - paste transient state in spacemacs","title":"Working with Projects"},{"location":"basics/projects/#discover-projects","text":"Space p D to discover projects withing the directories specified in projectile-project-search-path ( setq projectile-project-search-path ' (( \"~/projects\" . 2 ) ( \"~/.config\" . 1 )))","title":"Discover projects"},{"location":"basics/projects/#files","text":"Space u Space f f Space f f to open or create a new file. If a file is open in the current buffer, its path is used as the starting point. To create a file (and intermediate directories), type any additional path and file name. Space p f to list all files in the current project / workspace. Use this when you know the name of the project but not the path or to avoid navigating to the correct path. Project Cache Outdated Project cache should be refreshed when moving directories and files otherwise Doom may try to open a file from an old location Space u before a file command to clear the cache, e.g. Space u Space f f","title":"Files"},{"location":"basics/projects/#windows","text":"Space w and one of h j k l for vim-style navigation of windows Space w v to create a new vertical window, Space w h for a new horizontal window","title":"Windows"},{"location":"basics/projects/#sessions","text":"spc q s to save the current session, which should load when (re)starting Emacs","title":"Sessions"},{"location":"basics/projects/#searching-across-a-project","text":"Space / to search across all files in a project, using ripgrep (if installed on OS execution path) Search & Replace: C-cC-e after a search command to activate wgrep-mode. Now you may edit the results. Later, press C-cC-c (or ZZ , for evil users) to commit your changes. Ctrl + c + Ctrl + e opens search results in a separate buffer for editing results. Ctrl + c + Ctrl + c or Z Z to commit changes","title":"Searching across a project"},{"location":"basics/snippets/","text":"snippets \u03bb\ufe0e Yasnippets is provided by the snippets module Add snippets to the .config/doom/snippets directory, under a directory named after the major mode in which the snippet should be available, e.g. clojure snippets should be saved in the .config/doom/clojure-mode/ directory. Creating snippets \u03bb\ufe0e Ctrl + c Ctrl + n to create a new snippet in the current major mode (although that can be changed when saving the snippet) Visually select text before creating the snippet to create a snippet from that text. Edit the snippet using tab stops and place holders Ctrl + c Ctrl + c to commit the snippet, prompting for comfirmation of the major mode and if the snippet file should be saved. Creating custom yasnippets A Practicalli detailed guide to writing snippets with yasnippet Clojure LSP snippets \u03bb\ufe0e Enable the lsp and clojure adding lsp as an option lsp ( clojure +lsp ) Clojure LSP contains its own snippets. practicalli/clojure-lsp-config containes a range of snippets designed by Practicalli and used regularly. Add this configuration to .config/clojure-lsp or copy specific snippets to your clojure LSP configuration in the :additionaal-snippets key. Adding custom snippets \u03bb\ufe0e Custom snippets for Clojure LSP A Practicalli detailed guide for writing custom snippets for Clojure LSP Edit the config.edn file. The :additional-snippets key has a collection of hash-maps, with each hash-map representing a snippet. $n represents a tab-stop, where the TAB key will jump throughout the snippet. n is an integer number to define the order of the tab-stops, e.g. $1 , $2 , $3. $0 is a special tab-stop that denotes the end of the tab-stops, ending the snippet interaction. ${n:placeholder text} allows text to be placed at the tab-stop to give an indication as to the value to be completed. The placeholder text is automatically highlighted when tabbing into the tab-stop, so typing a new value replaces the placeholder text. Highlighting and replacing the text does not work for the $0 tab-stop, so placeholder text should not be used with this specific tab-stop.","title":"Snippets"},{"location":"basics/snippets/#snippets","text":"Yasnippets is provided by the snippets module Add snippets to the .config/doom/snippets directory, under a directory named after the major mode in which the snippet should be available, e.g. clojure snippets should be saved in the .config/doom/clojure-mode/ directory.","title":"snippets"},{"location":"basics/snippets/#creating-snippets","text":"Ctrl + c Ctrl + n to create a new snippet in the current major mode (although that can be changed when saving the snippet) Visually select text before creating the snippet to create a snippet from that text. Edit the snippet using tab stops and place holders Ctrl + c Ctrl + c to commit the snippet, prompting for comfirmation of the major mode and if the snippet file should be saved. Creating custom yasnippets A Practicalli detailed guide to writing snippets with yasnippet","title":"Creating snippets"},{"location":"basics/snippets/#clojure-lsp-snippets","text":"Enable the lsp and clojure adding lsp as an option lsp ( clojure +lsp ) Clojure LSP contains its own snippets. practicalli/clojure-lsp-config containes a range of snippets designed by Practicalli and used regularly. Add this configuration to .config/clojure-lsp or copy specific snippets to your clojure LSP configuration in the :additionaal-snippets key.","title":"Clojure LSP snippets"},{"location":"basics/snippets/#adding-custom-snippets","text":"Custom snippets for Clojure LSP A Practicalli detailed guide for writing custom snippets for Clojure LSP Edit the config.edn file. The :additional-snippets key has a collection of hash-maps, with each hash-map representing a snippet. $n represents a tab-stop, where the TAB key will jump throughout the snippet. n is an integer number to define the order of the tab-stops, e.g. $1 , $2 , $3. $0 is a special tab-stop that denotes the end of the tab-stops, ending the snippet interaction. ${n:placeholder text} allows text to be placed at the tab-stop to give an indication as to the value to be completed. The placeholder text is automatically highlighted when tabbing into the tab-stop, so typing a new value replaces the placeholder text. Highlighting and replacing the text does not work for the $0 tab-stop, so placeholder text should not be used with this specific tab-stop.","title":"Adding custom snippets"},{"location":"install/","text":"Install Spacemacs \u03bb\ufe0e Install prerequisites: Emacs, Java 17, Clojure CLI and Command Line tools Clone Doom Emacs to ~/.config/emacs Clone practicalli/doom-emacs-config configuration to add common layers for Clojure development. Or start Emacs and use the Spacemacs install wizard for basic config, follow the manual configuration section for additional features. [optional] Install Fira Code font (change dotspacemacs-default-font to a name of a font on your operating system in .spacemacs.d/init.el in step 4) Install All The Icons fonts for doom modeline theme Clone Doom Emacs \u03bb\ufe0e Use your favourite git client or the following command in a terminal window to clone Spacemacs and then run the Doom Emacs install script Use Practicalli Doom Emacs config rather than install Free Desktop XDG config Classic config git clone https://github.com/hlissner/doom-emacs ~/.config/emacs ~/.config/emacs/bin/doom install ~/.config/doom directory will be created by the install and contain the default configuration. git clone https://github.com/hlissner/doom-emacs ~/.emacs.d ~/.emacs.d/bin/doom install Post install \u03bb\ufe0e Doom Emacs outputs the following message at the end of the install Don't forget to run 'doom sync', then restart Emacs, after modifying ~/.doom.d/init.el or ~/.doom.d/packages.el. This command ensures needed packages are installed, orphaned packages are removed, and your autoloads/cache files are up to date. When in doubt, run 'doom sync'! If something goes wrong, run doom doctor . It diagnoses common issues with your environment and setup, and may offer clues about what is wrong. Use 'doom upgrade' to update Doom. Doing it any other way will require additional steps. Run 'doom help upgrade' to understand those extra steps. Access Doom's documentation from within Emacs via 'SPC h d h' or 'C-h d h' (or 'M-x doom/help') Add Doom command to path \u03bb\ufe0e Add .config/emacs/bin to Or create a symbolic link cd .local/bin ln -s ~/.config/emacs/bin/doom doom Run Emacs \u03bb\ufe0e The packages have been downloaded as part of the Doom Emacs install process. Run emacs from a desktop launcher or on the command line: emacs Native compliation initial high cpu use On first running Emacs after Doom install added packages, the elisp code will be compiled to native binaries. The compilation will use a lot of CPU resources Clone Practicalli Doom configuration \u03bb\ufe0e Not started yet Clone practicalli/doom-emacs-config or first create a fork and clone that fork Free Desktop XDG config Classic config Using SSH git clone git@github.com:practicalli/doom-emacs-config.git ~/.config/doom Using HTTPS git clone https://github.com/practicalli/doom-emacs-config ~/.config/doom Using SSH git clone git@github.com:practicalli/doom-emacs-config.git ~/.config/doom Using HTTP git clone https://github.com/practicalli/doom-emacs-config ~/.config/doom ~/.spacemacs.d/init.el is the main configuration file, ensure ~/.spacemacs file does not exist as that file would take precedence. Emacs custom settings .spacemacs.d/init.el configuration separates Emacs custom settings into a emacs-custom-setting file. emacs-custom-setting should be added to version control if the Emacs customize menu has been used to define settings. emacs-custom-file is defined in the dotspacemacs/user-init of the Spacemacs configuration ( setq custom-file ( file-truename ( concat dotspacemacs-directory \"emacs-custom-settings.el\" ))) ( load custom-file ) A specific path could also be used to define the location of the custom file: (setq custom-file \"~/.emacs.d/.cache/custom-settings\") Install Fira Code font \u03bb\ufe0e Install Fira Code practicalli/spacemacs.d uses Fira Code, a mono-spaced font designed for source code and includes ligatures and many other features . Use a different font with practicalli/spacemacs.d To use a different font when using the practicalli/spacemacs.d , edit .spacemacs.d/init.el and update the value for dotspacemacs-default-font to a name of a font on your system. All The Icon Fonts \u03bb\ufe0e practicalli/spacemacs.d configuration uses the modern looking doom modeline theme, which requires a few fonts and icons. SPC SPC all-the-icons-install-fonts once Spacemacs is running will install the fonts. Space q r to restart Spacemacs and see the finished results Spacemacs is ready for action \u03bb\ufe0e Spacemacs is now up and running and ready to take on the world. If you already know how to use Spacemacs, jump to the Clojure Projects section , otherwise look through the Spacemacs Basics section to learn how to use Vim style editing and work with files, buffers and windows in Spacemacs.","title":"Install Spacemacs"},{"location":"install/#install-spacemacs","text":"Install prerequisites: Emacs, Java 17, Clojure CLI and Command Line tools Clone Doom Emacs to ~/.config/emacs Clone practicalli/doom-emacs-config configuration to add common layers for Clojure development. Or start Emacs and use the Spacemacs install wizard for basic config, follow the manual configuration section for additional features. [optional] Install Fira Code font (change dotspacemacs-default-font to a name of a font on your operating system in .spacemacs.d/init.el in step 4) Install All The Icons fonts for doom modeline theme","title":"Install Spacemacs"},{"location":"install/#clone-doom-emacs","text":"Use your favourite git client or the following command in a terminal window to clone Spacemacs and then run the Doom Emacs install script Use Practicalli Doom Emacs config rather than install Free Desktop XDG config Classic config git clone https://github.com/hlissner/doom-emacs ~/.config/emacs ~/.config/emacs/bin/doom install ~/.config/doom directory will be created by the install and contain the default configuration. git clone https://github.com/hlissner/doom-emacs ~/.emacs.d ~/.emacs.d/bin/doom install","title":"Clone Doom Emacs"},{"location":"install/#post-install","text":"Doom Emacs outputs the following message at the end of the install Don't forget to run 'doom sync', then restart Emacs, after modifying ~/.doom.d/init.el or ~/.doom.d/packages.el. This command ensures needed packages are installed, orphaned packages are removed, and your autoloads/cache files are up to date. When in doubt, run 'doom sync'! If something goes wrong, run doom doctor . It diagnoses common issues with your environment and setup, and may offer clues about what is wrong. Use 'doom upgrade' to update Doom. Doing it any other way will require additional steps. Run 'doom help upgrade' to understand those extra steps. Access Doom's documentation from within Emacs via 'SPC h d h' or 'C-h d h' (or 'M-x doom/help')","title":"Post install"},{"location":"install/#add-doom-command-to-path","text":"Add .config/emacs/bin to Or create a symbolic link cd .local/bin ln -s ~/.config/emacs/bin/doom doom","title":"Add Doom command to path"},{"location":"install/#run-emacs","text":"The packages have been downloaded as part of the Doom Emacs install process. Run emacs from a desktop launcher or on the command line: emacs Native compliation initial high cpu use On first running Emacs after Doom install added packages, the elisp code will be compiled to native binaries. The compilation will use a lot of CPU resources","title":"Run Emacs"},{"location":"install/#clone-practicalli-doom-configuration","text":"Not started yet Clone practicalli/doom-emacs-config or first create a fork and clone that fork Free Desktop XDG config Classic config Using SSH git clone git@github.com:practicalli/doom-emacs-config.git ~/.config/doom Using HTTPS git clone https://github.com/practicalli/doom-emacs-config ~/.config/doom Using SSH git clone git@github.com:practicalli/doom-emacs-config.git ~/.config/doom Using HTTP git clone https://github.com/practicalli/doom-emacs-config ~/.config/doom ~/.spacemacs.d/init.el is the main configuration file, ensure ~/.spacemacs file does not exist as that file would take precedence. Emacs custom settings .spacemacs.d/init.el configuration separates Emacs custom settings into a emacs-custom-setting file. emacs-custom-setting should be added to version control if the Emacs customize menu has been used to define settings. emacs-custom-file is defined in the dotspacemacs/user-init of the Spacemacs configuration ( setq custom-file ( file-truename ( concat dotspacemacs-directory \"emacs-custom-settings.el\" ))) ( load custom-file ) A specific path could also be used to define the location of the custom file: (setq custom-file \"~/.emacs.d/.cache/custom-settings\")","title":"Clone Practicalli Doom configuration"},{"location":"install/#install-fira-code-font","text":"Install Fira Code practicalli/spacemacs.d uses Fira Code, a mono-spaced font designed for source code and includes ligatures and many other features . Use a different font with practicalli/spacemacs.d To use a different font when using the practicalli/spacemacs.d , edit .spacemacs.d/init.el and update the value for dotspacemacs-default-font to a name of a font on your system.","title":"Install Fira Code font"},{"location":"install/#all-the-icon-fonts","text":"practicalli/spacemacs.d configuration uses the modern looking doom modeline theme, which requires a few fonts and icons. SPC SPC all-the-icons-install-fonts once Spacemacs is running will install the fonts. Space q r to restart Spacemacs and see the finished results","title":"All The Icon Fonts"},{"location":"install/#spacemacs-is-ready-for-action","text":"Spacemacs is now up and running and ready to take on the world. If you already know how to use Spacemacs, jump to the Clojure Projects section , otherwise look through the Spacemacs Basics section to learn how to use Vim style editing and work with files, buffers and windows in Spacemacs.","title":"Spacemacs is ready for action"},{"location":"install/clojure-configuration/","text":"Clojure configuration \u03bb\ufe0e Enable the Clojure module with LSP support in the ~/.config/doom/init.el configuration file ( clojure +lsp ) lsp Use the doom command to load the modules doom sync Cider configuration \u03bb\ufe0e Define variables to configure CIDER ~/.config/doom/config.el ( use-package! cider :after clojure-mode :config ( setq cider-show-error-buffer t ;'only-in-repl cider-font-lock-dynamically nil ; use lsp semantic tokens cider-eldoc-display-for-symbol-at-point nil ; use lsp cider-prompt-for-symbol nil cider-use-xref nil ; use lsp cider-repl-pop-to-buffer-on-connect nil ; REPL buffer shown at starup clojure-enable-kaocha-runner t ; enable Kaocha test runner cider-repl-display-help-banner nil ; disable help banner cider-print-fn 'puget ; pretty printing with sorted keys / set values cider-result-overlay-position 'at-point ; results shown right after expression cider-overlays-use-font-lock t cider-repl-buffer-size-limit 100 ; limit lines shown in REPL buffer cider-repl-history-size 42 ) ( set-lookup-handlers! ' ( cider-mode cider-repl-mode ) nil ) ; use lsp ( set-popup-rule! \"*cider-test-report*\" :side 'right :width 0.4 ) ( set-popup-rule! \"^\\\\*cider-repl\" :side 'bottom :quit nil ) ;; use lsp completion ( add-hook 'cider-mode-hook ( lambda () ( remove-hook 'completion-at-point-functions #' cider-complete-at-point )))) ( use-package! clojure-mode :config ( setq clojure-indent-style 'align-arguments clojure-align-forms-automatically t clojure-toplevel-inside-comment-form t ;; evaluate expressions in comment as top level )) Restart Doom Emacs after larger changes Space q r to restart Doom Emacs when significant changes are made or something is not working correctly Clojure CLI \u03bb\ufe0e Practicalli Clojure install guide Clojure CLI provides a way to run Clojure code, packaged Clojure (jar) and of course run a Clojure REPL. Practicalli Clojure install guide details prerequisites, Clojure install options and supporting tools for an enhanced developer workflow. Or visit the Clojure Getting Started guide for just the Clojure CLI. practicalli/clojure-deps-edn provides a wide range of community tools that can easily be added to the development environment and used across all projects. Aliases are required for many command examples Without installing practicalli/clojure-deps-edn many commands provided in this book will not work, unless the same alias configuration is added to a either a project or user level deps.edn configuration. Clojure LSP \u03bb\ufe0e Clojure LSP installation guide Practicalli Clojure LSP configuration Clojure LSP provides a standard set of features for editing and manipulating source code, e.g. autocompletion, code navigation, refactor code, inline syntax errors and idiom warnings. LSP and the REPL The REPL is used to design Clojure effectively by providing instant feedback on code expressions as they are written and evaluated. A REPL based workflow supports the most effective approach to development of Clojure apps and services. Clojure LSP supports the editing activities to write Clojure code effectively, providing a static analysis of the code base that drives advance editing, navigation and refactor tasks. Install the Clojure LSP command line tool and configure ~./config/clojure-lsp/config.edn or use Practicalli Clojure LSP configuration which provides a complete configuration for clojure-lsp ( config.edn ), including a wide range of snippets and less restrictive formatting rules ( cljfmt.edn ). Free Desktop XDG Config Classic Config Clone via SSH git clone -o practicalli git@github.com:practicalli/clojure-lsp-config.git $XDG_CONFIG_HOME /clojure-lsp Clone via HTTPS git clone -o practicalli https://github.com/practicalli/clojure-lsp-config.git $XDG_CONFIG_HOME /clojure-lsp Clone via SSH git clone -o practicalli git@github.com:practicalli/clojure-lsp-config.git $HOME /.clojure-lsp Clone via HTTPS git clone -o practicalli https://github.com/practicalli/clojure-lsp-config.git $HOME /.clojure-lsp Run the clojure-lsp command in a terminal to ensure the install was successful. clojure-lsp -v Clojure LSP and clj-kondo Clojure LSP includes clj-kondo to provide an implementation of the Language Server Protocol for the Clojure Language . clj-kondo provides static analysis of source code files, providing subtle warnings as Clojure code is written to help the developer follow idioms and avoid syntatic errors. References \u03bb\ufe0e Configure Emacs as a Clojure IDE guide A guide on disabling/enabling lsp-mode features Emacs LSP UI website and emacs-lsp/lsp-ui repository","title":"Clojure configuration"},{"location":"install/clojure-configuration/#clojure-configuration","text":"Enable the Clojure module with LSP support in the ~/.config/doom/init.el configuration file ( clojure +lsp ) lsp Use the doom command to load the modules doom sync","title":"Clojure configuration"},{"location":"install/clojure-configuration/#cider-configuration","text":"Define variables to configure CIDER ~/.config/doom/config.el ( use-package! cider :after clojure-mode :config ( setq cider-show-error-buffer t ;'only-in-repl cider-font-lock-dynamically nil ; use lsp semantic tokens cider-eldoc-display-for-symbol-at-point nil ; use lsp cider-prompt-for-symbol nil cider-use-xref nil ; use lsp cider-repl-pop-to-buffer-on-connect nil ; REPL buffer shown at starup clojure-enable-kaocha-runner t ; enable Kaocha test runner cider-repl-display-help-banner nil ; disable help banner cider-print-fn 'puget ; pretty printing with sorted keys / set values cider-result-overlay-position 'at-point ; results shown right after expression cider-overlays-use-font-lock t cider-repl-buffer-size-limit 100 ; limit lines shown in REPL buffer cider-repl-history-size 42 ) ( set-lookup-handlers! ' ( cider-mode cider-repl-mode ) nil ) ; use lsp ( set-popup-rule! \"*cider-test-report*\" :side 'right :width 0.4 ) ( set-popup-rule! \"^\\\\*cider-repl\" :side 'bottom :quit nil ) ;; use lsp completion ( add-hook 'cider-mode-hook ( lambda () ( remove-hook 'completion-at-point-functions #' cider-complete-at-point )))) ( use-package! clojure-mode :config ( setq clojure-indent-style 'align-arguments clojure-align-forms-automatically t clojure-toplevel-inside-comment-form t ;; evaluate expressions in comment as top level )) Restart Doom Emacs after larger changes Space q r to restart Doom Emacs when significant changes are made or something is not working correctly","title":"Cider configuration"},{"location":"install/clojure-configuration/#clojure-cli","text":"Practicalli Clojure install guide Clojure CLI provides a way to run Clojure code, packaged Clojure (jar) and of course run a Clojure REPL. Practicalli Clojure install guide details prerequisites, Clojure install options and supporting tools for an enhanced developer workflow. Or visit the Clojure Getting Started guide for just the Clojure CLI. practicalli/clojure-deps-edn provides a wide range of community tools that can easily be added to the development environment and used across all projects. Aliases are required for many command examples Without installing practicalli/clojure-deps-edn many commands provided in this book will not work, unless the same alias configuration is added to a either a project or user level deps.edn configuration.","title":"Clojure CLI"},{"location":"install/clojure-configuration/#clojure-lsp","text":"Clojure LSP installation guide Practicalli Clojure LSP configuration Clojure LSP provides a standard set of features for editing and manipulating source code, e.g. autocompletion, code navigation, refactor code, inline syntax errors and idiom warnings. LSP and the REPL The REPL is used to design Clojure effectively by providing instant feedback on code expressions as they are written and evaluated. A REPL based workflow supports the most effective approach to development of Clojure apps and services. Clojure LSP supports the editing activities to write Clojure code effectively, providing a static analysis of the code base that drives advance editing, navigation and refactor tasks. Install the Clojure LSP command line tool and configure ~./config/clojure-lsp/config.edn or use Practicalli Clojure LSP configuration which provides a complete configuration for clojure-lsp ( config.edn ), including a wide range of snippets and less restrictive formatting rules ( cljfmt.edn ). Free Desktop XDG Config Classic Config Clone via SSH git clone -o practicalli git@github.com:practicalli/clojure-lsp-config.git $XDG_CONFIG_HOME /clojure-lsp Clone via HTTPS git clone -o practicalli https://github.com/practicalli/clojure-lsp-config.git $XDG_CONFIG_HOME /clojure-lsp Clone via SSH git clone -o practicalli git@github.com:practicalli/clojure-lsp-config.git $HOME /.clojure-lsp Clone via HTTPS git clone -o practicalli https://github.com/practicalli/clojure-lsp-config.git $HOME /.clojure-lsp Run the clojure-lsp command in a terminal to ensure the install was successful. clojure-lsp -v Clojure LSP and clj-kondo Clojure LSP includes clj-kondo to provide an implementation of the Language Server Protocol for the Clojure Language . clj-kondo provides static analysis of source code files, providing subtle warnings as Clojure code is written to help the developer follow idioms and avoid syntatic errors.","title":"Clojure LSP"},{"location":"install/clojure-configuration/#references","text":"Configure Emacs as a Clojure IDE guide A guide on disabling/enabling lsp-mode features Emacs LSP UI website and emacs-lsp/lsp-ui repository","title":"References"},{"location":"install/doom-configuration/","text":"Doom Emacs configuration \u03bb\ufe0e Doom curates a large number of modules, a module being one or more Emacs packages with configuration. ~/.config/doom/ contains three configuration files created by the install process. init.el - enable / disable Doom modules config.el - elisp configuration, setting variables, etc. packages.el - manage specific packages, adding to or overriding packages in the Doom modules Check parens are balanced in config check-parens command will check the current buffer for balanced parens (all open parens have a matching close paren) Doom modules \u03bb\ufe0e Space h d m to see the built-in documentation for a Doom module (NOTE: documentation can be light or non-existant) Line Numbers \u03bb\ufe0e display-line-numbers-type configures the type of line numbers nil consecutive line numbering, 1,2,3,... relative relative numbers to current line for vim navigation, e.g. 24 j to jump down 24 lines. ~/.config/doom/config.el ( setq display-line-numbers-type 'relative ) Frames \u03bb\ufe0e Space t F toggles the current frame to be full screen TODO: is there a setting to open Doom Emacs in full screen Configure Emacs to always start maximized ~/.config/doom/config.el ( add-to-list 'default-frame-alist ' ( fullscreen . maximized )) Theme \u03bb\ufe0e Space h T opens a selection menu of all available themes. Type a theme name or scroll with Ctrl + j and Ctrl + k Enter to select the theme. doom-gruvbox theme is configured in practicalli/doom-emacs-config ~/.config/doom/config.el ( setq doom-theme 'doom-gruvbox ) Font \u03bb\ufe0e ++ctrl+equals++ to increase font size, Ctrl + - to decrease fault size. Practicalli recommends Fira Code font which is a very clear font for source code and also supports ligatures. Fira Code is configured in practicalli/doom-emacs-config ~/.config/doom/config.el ( setq doom-font ( font-spec :family \"Fira Code\" :size 14 :weight 'semi-light )) TODO: set font for big mode Space t b Doom Font variables Doom exposes five (optional) variables for controlling fonts in Doom: `doom-font' -- the primary font to use `doom-variable-pitch-font' -- a non-monospace font (where applicable) doom-big-font' -- used for doom-big-font-mode'; use this for presentations or streaming. `doom-unicode-font' -- for unicode glyphs doom-serif-font' -- for the fixed-pitch-serif' face 'C-h v doom-font' for documentation and more examples of what they accept. For example: Automatic Whitespace removal \u03bb\ufe0e Is this in the autoformat module ? `` Space c w deletes whitespace at end of lines Space c ++W++ deletes whitespace at end of lines Treemacs \u03bb\ufe0e Preview files when navigating file names in treemacs .config/doom/config.el ;; Not currently used in practicalli/doom-emacs-config ( map! :map treemacs-mode-map \"<down>\" ( lambda ( &optional arg ) ( interactive ) ( next-line arg ) ( save-selected-window ( treemacs-RET-action ))) \"<up>\" ( lambda ( &optional arg ) ( interactive ) ( previous-line arg ) ( save-selected-window ( treemacs-RET-action )))) Version control \u03bb\ufe0e Magit Forge encrypted developer token TODO: add to XDG_CONFIG_HOME ( setq auth-sources ' ( \"~/.authinfo.gpg\" ) auth-source-cache-expiry nil ) ; default is 7200 (2h)","title":"Doom Config"},{"location":"install/doom-configuration/#doom-emacs-configuration","text":"Doom curates a large number of modules, a module being one or more Emacs packages with configuration. ~/.config/doom/ contains three configuration files created by the install process. init.el - enable / disable Doom modules config.el - elisp configuration, setting variables, etc. packages.el - manage specific packages, adding to or overriding packages in the Doom modules Check parens are balanced in config check-parens command will check the current buffer for balanced parens (all open parens have a matching close paren)","title":"Doom Emacs configuration"},{"location":"install/doom-configuration/#doom-modules","text":"Space h d m to see the built-in documentation for a Doom module (NOTE: documentation can be light or non-existant)","title":"Doom modules"},{"location":"install/doom-configuration/#line-numbers","text":"display-line-numbers-type configures the type of line numbers nil consecutive line numbering, 1,2,3,... relative relative numbers to current line for vim navigation, e.g. 24 j to jump down 24 lines. ~/.config/doom/config.el ( setq display-line-numbers-type 'relative )","title":"Line Numbers"},{"location":"install/doom-configuration/#frames","text":"Space t F toggles the current frame to be full screen TODO: is there a setting to open Doom Emacs in full screen Configure Emacs to always start maximized ~/.config/doom/config.el ( add-to-list 'default-frame-alist ' ( fullscreen . maximized ))","title":"Frames"},{"location":"install/doom-configuration/#theme","text":"Space h T opens a selection menu of all available themes. Type a theme name or scroll with Ctrl + j and Ctrl + k Enter to select the theme. doom-gruvbox theme is configured in practicalli/doom-emacs-config ~/.config/doom/config.el ( setq doom-theme 'doom-gruvbox )","title":"Theme"},{"location":"install/doom-configuration/#font","text":"++ctrl+equals++ to increase font size, Ctrl + - to decrease fault size. Practicalli recommends Fira Code font which is a very clear font for source code and also supports ligatures. Fira Code is configured in practicalli/doom-emacs-config ~/.config/doom/config.el ( setq doom-font ( font-spec :family \"Fira Code\" :size 14 :weight 'semi-light )) TODO: set font for big mode Space t b Doom Font variables Doom exposes five (optional) variables for controlling fonts in Doom: `doom-font' -- the primary font to use `doom-variable-pitch-font' -- a non-monospace font (where applicable) doom-big-font' -- used for doom-big-font-mode'; use this for presentations or streaming. `doom-unicode-font' -- for unicode glyphs doom-serif-font' -- for the fixed-pitch-serif' face 'C-h v doom-font' for documentation and more examples of what they accept. For example:","title":"Font"},{"location":"install/doom-configuration/#automatic-whitespace-removal","text":"Is this in the autoformat module ? `` Space c w deletes whitespace at end of lines Space c ++W++ deletes whitespace at end of lines","title":"Automatic Whitespace removal"},{"location":"install/doom-configuration/#treemacs","text":"Preview files when navigating file names in treemacs .config/doom/config.el ;; Not currently used in practicalli/doom-emacs-config ( map! :map treemacs-mode-map \"<down>\" ( lambda ( &optional arg ) ( interactive ) ( next-line arg ) ( save-selected-window ( treemacs-RET-action ))) \"<up>\" ( lambda ( &optional arg ) ( interactive ) ( previous-line arg ) ( save-selected-window ( treemacs-RET-action ))))","title":"Treemacs"},{"location":"install/doom-configuration/#version-control","text":"Magit Forge encrypted developer token TODO: add to XDG_CONFIG_HOME ( setq auth-sources ' ( \"~/.authinfo.gpg\" ) auth-source-cache-expiry nil ) ; default is 7200 (2h)","title":"Version control"},{"location":"install/pre-install/","text":"Pre-install \u03bb\ufe0e Spacemacs is a configuration for Emacs, so naturally Emacs should be installed before Spacemacs can be used. Clojure CLI should be installed to support Clojure development, along with several supporting development tools. Command Line Tools support searching for files and spell checking. Install Emacs \u03bb\ufe0e Emacs 28 is recommended as it includes native compilation support and optomised JSON support which is valuable for Language Server Protocol servers. Emacs is available for Linux, MacOSX and Windows. The Spacemacs Readme suggested ways to install Emacs Emacs Version 28 recommended Emacs 28 is recommended with native compilation of Elisp, which can have a significant improvement on Emacs package performance. Emacs 27.1 is the minimum version supported by Practicalli Spacemacs Ubuntu / Debian Homebrew / MacOSX Windows Msys2 apt-cache show emacs to check available versions of Emacs in the Ubuntu package manager. If version 28 is available, install Emacs using the Ubuntu package manager. sudo apt install emacs Additional versions of Emacs are available via the Ubuntu Emacs Team Personal Package Archive . sudo apt install emacs-snapshot package to use the latest nightly build of Emacs, although be aware that some things may break. Build Emacs 28 from source Building Emacs 28 from source code on Ubuntu is relatively straight forward task, although it will take a little time to compile. Building Emacs allows customisation of some features, such as native compilatin of elisp to enhance the performance of Emacs. Emacs Plus from Homebrew provides many options, including native compilation and Spacemacs Icon for application launchers. brew tap d12frosted/emacs-plus` brew install emacs-plus@28 --with-native-comp --with-spacemacs-icon Emacs.app is installed to: /usr/local/opt/emacs-plus@28 Optionally run Emacs plus as a service brew services start d12frosted/emacs-plus/emacs-plus@28 Run emacs Get a hot cup of something as Emacs native compilation compiles all the things. The Spacemacs README lists other options for MacOSX . Download Emacs-28.2 from the GNU repository and extract the zip file to %AppData%/local/Programs/emacs . Alternatively, if you are using the Chocolatey package manager then install Emacs version 28 Add the Emacs directory to the PATH variable in your user account environment variables. To start Emacs run the command runemacs.exe . You can also pin this to the start menu or task bar. Access to common Unix tools Command line tools, such as diff , are used by Emacs. To have these command line tools available in Windows, install Emacs as above but then run emacs from a Unix shell such as GitBash . Install Emacs (64bits build) with the following: pacman -S mingw-w64-x86_64-emacs Install Clojure CLI \u03bb\ufe0e Practicalli Clojure Install Guide Clojure CLI provide a simple and configurable way to: Run Clojure programs and tools Run an interactive REPL (Read-Eval-Print Loop) and evaluate Clojure expressions, usually with a Clojure aware editor Managing dependencies (via tools.deps) from Maven and Git repositories Using community tools on top of Clojure CLI tools provides tasks to create, develop, build and deploy Clojure applications and services Follow the Practicalli Clojure Install Guide to install Clojure and supporting tools. Command Line Tools \u03bb\ufe0e Emacs uses several external command line tools. There are some very efficient search tools that are recommended (ripgrep, silver searcher). Consider installing these tools to enhance your Spacemacs experience. spell check \u03bb\ufe0e spell-checking layer in Spacemacs supports ispell, hunspell, and aspell command line tools. Aspell is the recommended spell checking tool. Ubuntu / Debian Homebrew Manual Aspell binary is usually installed on Unix systems by default. Use sudo apt instal aspell if not already present. brew install aspell Aspell Install Text search \u03bb\ufe0e Search text buffers uses an external search tool. Although grep is available in most operating systems, ripgrep (rg) or silver-searcher (ag) offer far greater performance and have more search options. dotspacemacs-search-tools '(\"rg\" \"ag\" \"pt\" \"ack\" \"grep\") in the Spacemacs configuration defines the order of preference for the search tool to use. ripgrep (rg) Silver Searcher (ag) Find files \u03bb\ufe0e Space p opens the projectile menu for finding files relative to the current project. Projectile uses the external command line tool find to index files that are not part of a version controlled project (using git for projects versioned with Git). fd is an external command line binary that is faster than the find command. If installed, projectile will automatically use fd instead of find fd install instructions by operating system helm-locate \u03bb\ufe0e The locate binary is used by Space f L ( helm-locate ) to find files and directories on the operating system file space. helm-locate is the fastest way to search for files across the whole file space on your computer as it uses the updatedb database. If a file was very recently added to the file system, run sudo updatedb to ensure all files are in the database. Ubuntu / Debian Homebrew / MacOSX sudo apt install locate findutils Homebrew findutils brew install findutils","title":"Pre-install"},{"location":"install/pre-install/#pre-install","text":"Spacemacs is a configuration for Emacs, so naturally Emacs should be installed before Spacemacs can be used. Clojure CLI should be installed to support Clojure development, along with several supporting development tools. Command Line Tools support searching for files and spell checking.","title":"Pre-install"},{"location":"install/pre-install/#install-emacs","text":"Emacs 28 is recommended as it includes native compilation support and optomised JSON support which is valuable for Language Server Protocol servers. Emacs is available for Linux, MacOSX and Windows. The Spacemacs Readme suggested ways to install Emacs Emacs Version 28 recommended Emacs 28 is recommended with native compilation of Elisp, which can have a significant improvement on Emacs package performance. Emacs 27.1 is the minimum version supported by Practicalli Spacemacs Ubuntu / Debian Homebrew / MacOSX Windows Msys2 apt-cache show emacs to check available versions of Emacs in the Ubuntu package manager. If version 28 is available, install Emacs using the Ubuntu package manager. sudo apt install emacs Additional versions of Emacs are available via the Ubuntu Emacs Team Personal Package Archive . sudo apt install emacs-snapshot package to use the latest nightly build of Emacs, although be aware that some things may break. Build Emacs 28 from source Building Emacs 28 from source code on Ubuntu is relatively straight forward task, although it will take a little time to compile. Building Emacs allows customisation of some features, such as native compilatin of elisp to enhance the performance of Emacs. Emacs Plus from Homebrew provides many options, including native compilation and Spacemacs Icon for application launchers. brew tap d12frosted/emacs-plus` brew install emacs-plus@28 --with-native-comp --with-spacemacs-icon Emacs.app is installed to: /usr/local/opt/emacs-plus@28 Optionally run Emacs plus as a service brew services start d12frosted/emacs-plus/emacs-plus@28 Run emacs Get a hot cup of something as Emacs native compilation compiles all the things. The Spacemacs README lists other options for MacOSX . Download Emacs-28.2 from the GNU repository and extract the zip file to %AppData%/local/Programs/emacs . Alternatively, if you are using the Chocolatey package manager then install Emacs version 28 Add the Emacs directory to the PATH variable in your user account environment variables. To start Emacs run the command runemacs.exe . You can also pin this to the start menu or task bar. Access to common Unix tools Command line tools, such as diff , are used by Emacs. To have these command line tools available in Windows, install Emacs as above but then run emacs from a Unix shell such as GitBash . Install Emacs (64bits build) with the following: pacman -S mingw-w64-x86_64-emacs","title":"Install Emacs"},{"location":"install/pre-install/#install-clojure-cli","text":"Practicalli Clojure Install Guide Clojure CLI provide a simple and configurable way to: Run Clojure programs and tools Run an interactive REPL (Read-Eval-Print Loop) and evaluate Clojure expressions, usually with a Clojure aware editor Managing dependencies (via tools.deps) from Maven and Git repositories Using community tools on top of Clojure CLI tools provides tasks to create, develop, build and deploy Clojure applications and services Follow the Practicalli Clojure Install Guide to install Clojure and supporting tools.","title":"Install Clojure CLI"},{"location":"install/pre-install/#command-line-tools","text":"Emacs uses several external command line tools. There are some very efficient search tools that are recommended (ripgrep, silver searcher). Consider installing these tools to enhance your Spacemacs experience.","title":"Command Line Tools"},{"location":"install/pre-install/#spell-check","text":"spell-checking layer in Spacemacs supports ispell, hunspell, and aspell command line tools. Aspell is the recommended spell checking tool. Ubuntu / Debian Homebrew Manual Aspell binary is usually installed on Unix systems by default. Use sudo apt instal aspell if not already present. brew install aspell Aspell Install","title":"spell check"},{"location":"install/pre-install/#text-search","text":"Search text buffers uses an external search tool. Although grep is available in most operating systems, ripgrep (rg) or silver-searcher (ag) offer far greater performance and have more search options. dotspacemacs-search-tools '(\"rg\" \"ag\" \"pt\" \"ack\" \"grep\") in the Spacemacs configuration defines the order of preference for the search tool to use. ripgrep (rg) Silver Searcher (ag)","title":"Text search"},{"location":"install/pre-install/#find-files","text":"Space p opens the projectile menu for finding files relative to the current project. Projectile uses the external command line tool find to index files that are not part of a version controlled project (using git for projects versioned with Git). fd is an external command line binary that is faster than the find command. If installed, projectile will automatically use fd instead of find fd install instructions by operating system","title":"Find files"},{"location":"install/pre-install/#helm-locate","text":"The locate binary is used by Space f L ( helm-locate ) to find files and directories on the operating system file space. helm-locate is the fastest way to search for files across the whole file space on your computer as it uses the updatedb database. If a file was very recently added to the file system, run sudo updatedb to ensure all files are in the database. Ubuntu / Debian Homebrew / MacOSX sudo apt install locate findutils Homebrew findutils brew install findutils","title":"helm-locate"},{"location":"introduction/contributing/","text":"Contributing to Practicalli Emacs Doom \u03bb\ufe0e practicalli/doom-emacs is written in markdown and uses GitBook to generate the website via a GitHub action. By submitting content ideas and corrections you are agreeing they can be used in this workshop under the Creative Commons Attribution ShareAlike 4.0 International license . Attribution will be detailed via GitHub contributors . All content and interaction with any persons or systems must be done so with respect and within the Practicalli Code of Conduct. Book status \u03bb\ufe0e Submit and issue or idea \u03bb\ufe0e If something doesnt seem quite right or something is missing from the book, please raise an issue via the GitHub repository explaining in as much detail as you can. Considering a Pull request? \u03bb\ufe0e Before investing any time in a pull request, please raise an issue explaining the situation. This can save you and the maintainer time and avoid rejected pull requests. Please keep pull requests small and focused, as they are much quicker to review and easier to accept. Ideally PR's should be for a specific page or at most a section. A PR with a list of changes across different sections will not be merged, it will be reviewed eventually though. Thank you to everyone that has contributed \u03bb\ufe0e A huge thank you to Rich Hickey and the team at Cognitect for creating and continually guiding the Clojure language. Special thank you to Alex Miller who has provided excellent advice on working with Clojure and the CLI tooling. The Clojure community has been highly supportive of everyone using Clojure and I'd like to thank everyone for the feedback and contributions. I would also like to thank everyone that has joined in with the London Clojurins community , ClojureBridgeLondon , Clojurians Slack community , Clojurians Zulip community and Clojureverse community . Thank you to everyone who sponsors the Practicalli websites and videos and for the Clojurists Together sponsorship , it helps me continue the work at a much faster pace. Special thanks to Bruce Durling for getting me into Cloure in the first place.","title":"Contributing"},{"location":"introduction/contributing/#contributing-to-practicalli-emacs-doom","text":"practicalli/doom-emacs is written in markdown and uses GitBook to generate the website via a GitHub action. By submitting content ideas and corrections you are agreeing they can be used in this workshop under the Creative Commons Attribution ShareAlike 4.0 International license . Attribution will be detailed via GitHub contributors . All content and interaction with any persons or systems must be done so with respect and within the Practicalli Code of Conduct.","title":"Contributing to Practicalli Emacs Doom"},{"location":"introduction/contributing/#book-status","text":"","title":"Book status"},{"location":"introduction/contributing/#submit-and-issue-or-idea","text":"If something doesnt seem quite right or something is missing from the book, please raise an issue via the GitHub repository explaining in as much detail as you can.","title":"Submit and issue or idea"},{"location":"introduction/contributing/#considering-a-pull-request","text":"Before investing any time in a pull request, please raise an issue explaining the situation. This can save you and the maintainer time and avoid rejected pull requests. Please keep pull requests small and focused, as they are much quicker to review and easier to accept. Ideally PR's should be for a specific page or at most a section. A PR with a list of changes across different sections will not be merged, it will be reviewed eventually though.","title":"Considering a Pull request?"},{"location":"introduction/contributing/#thank-you-to-everyone-that-has-contributed","text":"A huge thank you to Rich Hickey and the team at Cognitect for creating and continually guiding the Clojure language. Special thank you to Alex Miller who has provided excellent advice on working with Clojure and the CLI tooling. The Clojure community has been highly supportive of everyone using Clojure and I'd like to thank everyone for the feedback and contributions. I would also like to thank everyone that has joined in with the London Clojurins community , ClojureBridgeLondon , Clojurians Slack community , Clojurians Zulip community and Clojureverse community . Thank you to everyone who sponsors the Practicalli websites and videos and for the Clojurists Together sponsorship , it helps me continue the work at a much faster pace. Special thanks to Bruce Durling for getting me into Cloure in the first place.","title":"Thank you to everyone that has contributed"},{"location":"introduction/repl-workflow/","text":"REPL Driven Development \u03bb\ufe0e Clojure is a powerful, fun and highly productive language for developing applications and services. The clear language design is supported by a powerful development environment known as the REPL (read, evaluate, print, loop). The REPL gives you instant feedback on what your code does and enables you to test either a single expression or run the whole application (including tests). REPL driven development is the foundation of working with Clojure effectively Coding with a REPL provides instant feedback as design decisions are coded. The REPL feedback helps test the assumptions that are driving the design choices. Important design choices should be codified in unit tests, optionally using spec. Read - code is read by the Clojure reader, passing any macros to the macro reader which converts those macros into Clojure code. Evaluate - code is compiled into the host language (e.g. Java bytecode) and executed Print - results of the code are displayed, either in the REPL or as part of the application. Loop - the REPL is a continuous process that evaluates code, either a single expression or the whole application. Always be REPL'ing Coding without a REPL feels like so limiting. I want instant fast feedback from my code as I craft it, testing my assumptions and design choices every step of the journey to a solution - John Stevenson, Practical.li Evaluating source code \u03bb\ufe0e A REPL connected editor is the primary tool for evaluating Clojure code from source code files, displaying the results inline. Source code is evaluated in its respective namespace, removing the need to change namespaces in the REPL directly, ( in-ns ), or use fully qualified names to call functions. Evaluate Clojure in Spacemacs , e f evaluates the top level form under the cursor, , e e evaluated the expression immediately before the cursor (useful for evaluating nested expressions) Hint , e ; ( cider-eval-defun-to-comment ) evaluates the current form and prints the result under the expression as a comment Adding result comment is an effective way to show the expected results of the code design, especially as a journal. Rich Comment blocks - living documentation \u03bb\ufe0e The (comment ,,,) function wraps code that is only run directly by the developer using a Clojure aware editor . Expressions in rich comment blocks can represent how to use the functions that make up the namespace API. For example, starting/restarting the system, updating the database, etc. Expressions provide examples of calling functions with typical arguments and make a project more accessible and easier to work with. Rich comment blocks are very useful for rapidly iterating over different design decisions by including the same function but with different implementations. Hide clj-kondo linter warnings for redefined vars ( def , defn ) when using this approach. ;; Rich comment block with redefined vars ignored # _ { :clj-kondo/ignore [ :redefined-var ]} ( comment ( defn value-added-tax [] ;; algorithm design - first try) ( defn value-added-tax [] ;; algorithm design - first try) ) ;; End of rich comment block The \"Rich\" in the name is an honourary mention to Rich Hickey, the author and benevolent dictator of Clojure design. Design Journal \u03bb\ufe0e A journal of design decisions makes the code easier to understand and maintain. Code examples of design decisions and alternative design discussions are captured, reducing the time spent revisiting those discussions. Journals simplify the developer on-boarding processes as the journey through design decisions are already documented. A Design Journal is usually created in a separate namespace, although it may start as a rich comment at the bottom of a namespace. A journal should cover the following aspects Relevant expressions use to test assumptions about design options. Examples of design choices not taken and discussions why (saves repeating the same design discussions) Expressions that can be evaluated to explain how a function or parts of a function work The design journal can be used to create meaningful documentation for the project very easily and should prevent time spent on repeating the same conversations. Example design journal Design journal for TicTacToe game using Reagent, ClojureScript and Scalable Vector Graphics Viewing data structures \u03bb\ufe0e Pretty print shows the structure of results from function calls in a human-friendly form, making it easier for a developer to parse and more likely to notice incorrect results. , e p on the Spacemacs Clojure menu has several commands to Pretty Print data structure results when evaluating code. , d v is the Cider Inspect menu for paging through very large data sets and navigate nested data structures in detail. , d is the Cider debug menu which can inspect view intermediate values and data structures during the debugging of Clojure function calls. Cider inspector is an effective way to navigate nested data and page through large data sets. External data browsers can visualise data in many different forms. Code Style and idiomatic Clojure \u03bb\ufe0e Clojure aware editors should automatically apply formatting that follows the Clojure Style guide . Live linting with clj-kondo suggests common idioms and highlights a wide range of syntax errors as code is written, minimizing bugs and therefore speeding up the development process. Clojure Style Guide The Clojure Style guide provides examples of common formatting approaches, although the development team should decide which of these to adopt. Emacs clojure-mode will automatically format code and so will Clojure LSP (via cljfmt). These tools are configurable and should be tailored to the teams standard. Test Driven Development and REPL Driven Development \u03bb\ufe0e Test Driven Development (TDD) and REPL Driven Development (RDD) complement each other as they both encourage incremental changes and continuous feedback. Test Driven Development fits well with Hammock Time, as good design comes from deep thought RDD enables rapid design experiments so different approaches can easily and quickly be evaluated . TDD focuses the results of the REPL experiments into design decisions, codified as unit tests. These tests guide the correctness of specific implementations and provide critical feedback when changes break that design. Unit tests should support the public API of each namespace in a project to help prevent regressions in the code. Its far more efficient in terms of thinking time to define unit tests as the design starts to stabilize than as an after thought. clojure.test library is part of the Clojure standard library that provides a simple way to start writing unit tests. Clojure spec can also be used for generative testing, providing far greater scope in values used when running unit tests. Specifications can be defined for values and functions. Clojure has a number of test runners available. Kaocha is a test runner that will run unit tests and function specification checks. Automate local test runner Use kaocha test runner in watch mode to run tests and specification check automatically (when changes are saved) clojure -X:test/watch Continuous Integration and Deployment \u03bb\ufe0e Add a continuous integration service to run tests and builds code on every shared commit. Spin up testable review deployments when commits pushed to a pull request branch, before pushing commits to the main deployment branch, creating an effective pipeline to gain further feedback. CircleCI provides a simple to use service that supports Clojure projects. GitHub Workflows and GitHub actions marketplace to quickly build a tailored continuous integration service, e.g. Setup Clojure GitHub Action . GitLab CI Live Coding with Data - Stuart Halloway \u03bb\ufe0e There are few novel features of programming languages, but each combination has different properties. The combination of dynamic, hosted, functional and extended Lisp in Clojure gives developers the tools for making effective programs. The ways in which Clojure's unique combination of features can yield a highly effective development process. Over more than a decade we have developed an effective approach to writing code in Clojure whose power comes from composing many of its key features. As different as Clojure programs are from e.g. Java programs, so to can and should be the development experience. You are not in Kansas anymore! This talk presents a demonstration of the leverage you can get when writing programs in Clojure, with examples, based on my experiences as a core developer of Clojure and Datomic.","title":"REPL Workflow"},{"location":"introduction/repl-workflow/#repl-driven-development","text":"Clojure is a powerful, fun and highly productive language for developing applications and services. The clear language design is supported by a powerful development environment known as the REPL (read, evaluate, print, loop). The REPL gives you instant feedback on what your code does and enables you to test either a single expression or run the whole application (including tests). REPL driven development is the foundation of working with Clojure effectively Coding with a REPL provides instant feedback as design decisions are coded. The REPL feedback helps test the assumptions that are driving the design choices. Important design choices should be codified in unit tests, optionally using spec. Read - code is read by the Clojure reader, passing any macros to the macro reader which converts those macros into Clojure code. Evaluate - code is compiled into the host language (e.g. Java bytecode) and executed Print - results of the code are displayed, either in the REPL or as part of the application. Loop - the REPL is a continuous process that evaluates code, either a single expression or the whole application. Always be REPL'ing Coding without a REPL feels like so limiting. I want instant fast feedback from my code as I craft it, testing my assumptions and design choices every step of the journey to a solution - John Stevenson, Practical.li","title":"REPL Driven Development"},{"location":"introduction/repl-workflow/#evaluating-source-code","text":"A REPL connected editor is the primary tool for evaluating Clojure code from source code files, displaying the results inline. Source code is evaluated in its respective namespace, removing the need to change namespaces in the REPL directly, ( in-ns ), or use fully qualified names to call functions. Evaluate Clojure in Spacemacs , e f evaluates the top level form under the cursor, , e e evaluated the expression immediately before the cursor (useful for evaluating nested expressions) Hint , e ; ( cider-eval-defun-to-comment ) evaluates the current form and prints the result under the expression as a comment Adding result comment is an effective way to show the expected results of the code design, especially as a journal.","title":"Evaluating source code"},{"location":"introduction/repl-workflow/#rich-comment-blocks-living-documentation","text":"The (comment ,,,) function wraps code that is only run directly by the developer using a Clojure aware editor . Expressions in rich comment blocks can represent how to use the functions that make up the namespace API. For example, starting/restarting the system, updating the database, etc. Expressions provide examples of calling functions with typical arguments and make a project more accessible and easier to work with. Rich comment blocks are very useful for rapidly iterating over different design decisions by including the same function but with different implementations. Hide clj-kondo linter warnings for redefined vars ( def , defn ) when using this approach. ;; Rich comment block with redefined vars ignored # _ { :clj-kondo/ignore [ :redefined-var ]} ( comment ( defn value-added-tax [] ;; algorithm design - first try) ( defn value-added-tax [] ;; algorithm design - first try) ) ;; End of rich comment block The \"Rich\" in the name is an honourary mention to Rich Hickey, the author and benevolent dictator of Clojure design.","title":"Rich Comment blocks - living documentation"},{"location":"introduction/repl-workflow/#design-journal","text":"A journal of design decisions makes the code easier to understand and maintain. Code examples of design decisions and alternative design discussions are captured, reducing the time spent revisiting those discussions. Journals simplify the developer on-boarding processes as the journey through design decisions are already documented. A Design Journal is usually created in a separate namespace, although it may start as a rich comment at the bottom of a namespace. A journal should cover the following aspects Relevant expressions use to test assumptions about design options. Examples of design choices not taken and discussions why (saves repeating the same design discussions) Expressions that can be evaluated to explain how a function or parts of a function work The design journal can be used to create meaningful documentation for the project very easily and should prevent time spent on repeating the same conversations. Example design journal Design journal for TicTacToe game using Reagent, ClojureScript and Scalable Vector Graphics","title":"Design Journal"},{"location":"introduction/repl-workflow/#viewing-data-structures","text":"Pretty print shows the structure of results from function calls in a human-friendly form, making it easier for a developer to parse and more likely to notice incorrect results. , e p on the Spacemacs Clojure menu has several commands to Pretty Print data structure results when evaluating code. , d v is the Cider Inspect menu for paging through very large data sets and navigate nested data structures in detail. , d is the Cider debug menu which can inspect view intermediate values and data structures during the debugging of Clojure function calls. Cider inspector is an effective way to navigate nested data and page through large data sets. External data browsers can visualise data in many different forms.","title":"Viewing data structures"},{"location":"introduction/repl-workflow/#code-style-and-idiomatic-clojure","text":"Clojure aware editors should automatically apply formatting that follows the Clojure Style guide . Live linting with clj-kondo suggests common idioms and highlights a wide range of syntax errors as code is written, minimizing bugs and therefore speeding up the development process. Clojure Style Guide The Clojure Style guide provides examples of common formatting approaches, although the development team should decide which of these to adopt. Emacs clojure-mode will automatically format code and so will Clojure LSP (via cljfmt). These tools are configurable and should be tailored to the teams standard.","title":"Code Style and idiomatic Clojure"},{"location":"introduction/repl-workflow/#test-driven-development-and-repl-driven-development","text":"Test Driven Development (TDD) and REPL Driven Development (RDD) complement each other as they both encourage incremental changes and continuous feedback. Test Driven Development fits well with Hammock Time, as good design comes from deep thought RDD enables rapid design experiments so different approaches can easily and quickly be evaluated . TDD focuses the results of the REPL experiments into design decisions, codified as unit tests. These tests guide the correctness of specific implementations and provide critical feedback when changes break that design. Unit tests should support the public API of each namespace in a project to help prevent regressions in the code. Its far more efficient in terms of thinking time to define unit tests as the design starts to stabilize than as an after thought. clojure.test library is part of the Clojure standard library that provides a simple way to start writing unit tests. Clojure spec can also be used for generative testing, providing far greater scope in values used when running unit tests. Specifications can be defined for values and functions. Clojure has a number of test runners available. Kaocha is a test runner that will run unit tests and function specification checks. Automate local test runner Use kaocha test runner in watch mode to run tests and specification check automatically (when changes are saved) clojure -X:test/watch","title":"Test Driven Development and REPL Driven Development"},{"location":"introduction/repl-workflow/#continuous-integration-and-deployment","text":"Add a continuous integration service to run tests and builds code on every shared commit. Spin up testable review deployments when commits pushed to a pull request branch, before pushing commits to the main deployment branch, creating an effective pipeline to gain further feedback. CircleCI provides a simple to use service that supports Clojure projects. GitHub Workflows and GitHub actions marketplace to quickly build a tailored continuous integration service, e.g. Setup Clojure GitHub Action . GitLab CI","title":"Continuous Integration and Deployment"},{"location":"introduction/repl-workflow/#live-coding-with-data-stuart-halloway","text":"There are few novel features of programming languages, but each combination has different properties. The combination of dynamic, hosted, functional and extended Lisp in Clojure gives developers the tools for making effective programs. The ways in which Clojure's unique combination of features can yield a highly effective development process. Over more than a decade we have developed an effective approach to writing code in Clojure whose power comes from composing many of its key features. As different as Clojure programs are from e.g. Java programs, so to can and should be the development experience. You are not in Kansas anymore! This talk presents a demonstration of the leverage you can get when writing programs in Clojure, with examples, based on my experiences as a core developer of Clojure and Datomic.","title":"Live Coding with Data - Stuart Halloway"},{"location":"introduction/spacemacs-or-doom/","text":"Spacemacs or Emacs Doom \u03bb\ufe0e Spacemacs and Doom Emacs are both open source projects that provide a large amount of common configuration in an easy to use way (typically with little or no Emacs Lisp knowledge required). Common features \u03bb\ufe0e helm or ivy - both completion frameworks availalable (defaults: Spacemacs uses Helm, Doom uses Ivy) projectile project management layers rather than individual packages package manager (Spacemacs: packages.el, Doom: straight.el) modelines, themes and anything else you can think of probably Is Doom faster than other Emacs configurations \u03bb\ufe0e The most noticable difference between Doom and other Emacs configurations is that Doom uses Ivy by default, which typically uses less resources than Helm, as Ivy does not have the comprehensive level of features that Helm provides. Otherwise Practicalli hasnt experienced a noticable performance difference with Doom, as the vast majority of code is in the shared packages that are used by Doom and other projects. Emacs packages do most of the work, so try a different package (e.g. Ivy instead of Helm). Doom, Spacemacs and Prelude are all running on Emacs, so if you find something is running slow, try a different packaging of Emacs for your operating system and make sure you are on Emacs 27.1 or greater. Doom Emacs has very few features enabled by default, so the startup time after install is initially very fast (of little importance if you have Emacs open for weeks or running as a server / deamon). Personally I find Doom slower to use as it does not provide a full set of mnemonic key bindings and are therefore less intuitive to used compared to Spacemacs. See the Clojure module key bindings for example. This could be fixed by re-binding most of the default key bindings to be mnemonic in your own personal configuration. In the end the slowest part of the equation is the person operating Emacs. If you are slow to tell Emacs what to do, it doesnt matter how fast it does it...","title":"Spacemacs Or Doom"},{"location":"introduction/spacemacs-or-doom/#spacemacs-or-emacs-doom","text":"Spacemacs and Doom Emacs are both open source projects that provide a large amount of common configuration in an easy to use way (typically with little or no Emacs Lisp knowledge required).","title":"Spacemacs or Emacs Doom"},{"location":"introduction/spacemacs-or-doom/#common-features","text":"helm or ivy - both completion frameworks availalable (defaults: Spacemacs uses Helm, Doom uses Ivy) projectile project management layers rather than individual packages package manager (Spacemacs: packages.el, Doom: straight.el) modelines, themes and anything else you can think of probably","title":"Common features"},{"location":"introduction/spacemacs-or-doom/#is-doom-faster-than-other-emacs-configurations","text":"The most noticable difference between Doom and other Emacs configurations is that Doom uses Ivy by default, which typically uses less resources than Helm, as Ivy does not have the comprehensive level of features that Helm provides. Otherwise Practicalli hasnt experienced a noticable performance difference with Doom, as the vast majority of code is in the shared packages that are used by Doom and other projects. Emacs packages do most of the work, so try a different package (e.g. Ivy instead of Helm). Doom, Spacemacs and Prelude are all running on Emacs, so if you find something is running slow, try a different packaging of Emacs for your operating system and make sure you are on Emacs 27.1 or greater. Doom Emacs has very few features enabled by default, so the startup time after install is initially very fast (of little importance if you have Emacs open for weeks or running as a server / deamon). Personally I find Doom slower to use as it does not provide a full set of mnemonic key bindings and are therefore less intuitive to used compared to Spacemacs. See the Clojure module key bindings for example. This could be fixed by re-binding most of the default key bindings to be mnemonic in your own personal configuration. In the end the slowest part of the equation is the person operating Emacs. If you are slow to tell Emacs what to do, it doesnt matter how fast it does it...","title":"Is Doom faster than other Emacs configurations"},{"location":"introduction/why-doom-emacs/","text":"Why Doom Emacs \u03bb\ufe0e Practicalli is evaluating Doom Emacs after many years of using Spacemacs (which is still the main Emacs configuration used) Potential reasons to use Doom as an alternative package mangager pins specific versions of packages more comprehensive support for Clojure LSP UI elements compared to Spacemacs (docs, etc7) Vim-style editing even more prevelent in Doom (as it doesnt have some of the features of Spacemacs), so may help with adoption of Neovim & Conjure Migrating from Spacemacs \u03bb\ufe0e The two challenging areas are percieved to be key bindings (mnemonic and consistent key bindings used in Spacemacs are not consistent in Doom) Features available (modules in Doom) - Doom is advertised as quite minimal Irelevant aspects \u03bb\ufe0e - Startup speed - a few seconds to start up Emacs is perfectly fine for the Practicalli workflow, where Emacs typically stays running for weeks or months \u03bb\ufe0e","title":"Why Doom Emacs"},{"location":"introduction/why-doom-emacs/#why-doom-emacs","text":"Practicalli is evaluating Doom Emacs after many years of using Spacemacs (which is still the main Emacs configuration used) Potential reasons to use Doom as an alternative package mangager pins specific versions of packages more comprehensive support for Clojure LSP UI elements compared to Spacemacs (docs, etc7) Vim-style editing even more prevelent in Doom (as it doesnt have some of the features of Spacemacs), so may help with adoption of Neovim & Conjure","title":"Why Doom Emacs"},{"location":"introduction/why-doom-emacs/#migrating-from-spacemacs","text":"The two challenging areas are percieved to be key bindings (mnemonic and consistent key bindings used in Spacemacs are not consistent in Doom) Features available (modules in Doom) - Doom is advertised as quite minimal","title":"Migrating from Spacemacs"},{"location":"introduction/why-doom-emacs/#irelevant-aspects","text":"","title":"Irelevant aspects"},{"location":"introduction/why-doom-emacs/#-startup-speed-a-few-seconds-to-start-up-emacs-is-perfectly-fine-for-the-practicalli-workflow-where-emacs-typically-stays-running-for-weeks-or-months","text":"","title":"- Startup speed - a few seconds to start up Emacs is perfectly fine for the Practicalli workflow, where Emacs typically stays running for weeks or months"},{"location":"introduction/writing-tips/","text":"Writing tips for MkDocs \u03bb\ufe0e Making the docs more engaging using the mkdocs-material theme reference guide Hypertext links \u03bb\ufe0e Links open in the same browser window/tab by default. Add {target=_blank} to the end of a link to configure opening in a new tab [ link text ]( url ){target=_blank} Buttons \u03bb\ufe0e Convert any link into a button by adding { .md-button } class names to end of the markdown for a link, which uses .md-button-primary by default. Include target=_blank for buttons with links to external sites. [link text](http://practical.li/blog){ .md-button target=_blank } Practicalli Blog Add an icon to the button with fontawsome Practicalli Issues YouTube video \u03bb\ufe0e Use an iframe element to include a YouTube video, wrapping in a paragraph tag with center alignment to place the video in a centered horizontal position < p style = \"text-align:center\" > < iframe width = \"560\" height = \"315\" src = \"https://www.youtube.com/embed/rQ802kSaip4\" title = \"YouTube video player\" frameborder = \"0\" allow = \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen ></ iframe > </ p > mkdocs material does not have direct support for adding a YouTube video via markdown. Admonitions \u03bb\ufe0e Supported admonition types Note Use !!! followed by NOTE Adding a title Use !!! followed by NOTE and a \"title in double quotes\" Shh, no title bar just the text... Use !!! followed by NOTE and a \"\" empty double quotes Abstract Use !!! followed by ABSTRACT Info Use !!! followed by INFO Tip Use !!! followed by TIP Success Use !!! followed by SUCCESS Question Use !!! followed by QUESTION Warning Use !!! followed by WARNING Failure Use !!! followed by FAILURE Danger Use !!! followed by DANGER Bug Use !!! followed by BUG Example Use !!! followed by EXAMPLE Quote Use !!! followed by QUOTE Collapsing admonitions \u03bb\ufe0e Note Collapse those admonitions using ??? instead of !!! Replace with a title Use ??? followed by NOTE and a \"title in double quotes\" Expanded by default Use ???+ , note the + character, followed by NOTE and a \"title in double quotes\" Inline blocks \u03bb\ufe0e Inline blocks of text to make a very specific callout within text Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Adding something to then end of text is probably my favourite Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Code blocks \u03bb\ufe0e Code blocks include a copy icon automatically Syntax highlighting in code blocks ( defn my-function ; Write a simple function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ])) Give the code block a title using title=\"\" after the backtics and language name src/practicalli/gameboard.clj ( defn my-function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ])) We all like line numbers, especially when you can set the starting line src/practicalli/gameboard.clj 42 43 44 45 ( defn my-function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ])) Add linenums=42 to start line numbers from 42 onward clojure linenums=\"42\" title=\"src/practicalli/gameboard.clj\" Annotations \u03bb\ufe0e Add an annotation using # (1) where 1 is the number of the annotation ls -la $HOME /Downloads # (1) 1. :woman_raising_hand: I'm a code annotation! I can contain `code`, __formatted text__, images, ... basically anything that can be written in Markdown. Code blocks with annotation, add ! after the annotation number to suppress the # character ( defn helper-function \"Doc-string with description of function purpose\" ; (1)! [ data ] ( merge { :fish 1 } data ) ) 1. Always include a doc-string in every function to describe the purpose of that function, identifying why it was added and what its value is. GitHub action example with multiple annotations GitHub action example with multiple annotations name : ci # (1)! on : push : branches : - master # (2)! - main permissions : contents : write jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v3 - uses : actions/setup-python@v4 with : python-version : 3.x - run : pip install mkdocs-material # (3)! - run : mkdocs gh-deploy --force You can change the name to your liking. At some point, GitHub renamed master to main . If your default branch is named master , you can safely remove main , vice versa. This is the place to install further [MkDocs plugins] or Markdown extensions with pip to be used during the build: pip install \\ mkdocs-material \\ mkdocs-awesome-pages-plugin \\ ... Highlight lines in code blocks \u03bb\ufe0e hl_lines=\"2\" where 2 is the line number to highlight ( defn my-function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ])) Content tabs \u03bb\ufe0e Create in page tabs that can also be Setting up a project Clojure CLI Leiningen clojure -T:project/new :template app :name practicalli/gameboard lein new app practicalli/gameboard Or nest the content tabs in an admonition Run a terminal REPL Clojure CLI Leiningen clojure -T:repl/rebel lein repl Diagrams \u03bb\ufe0e Neat flow diagrams graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; UML Sequence Diagrams sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! state transition diagrams stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] Class diagrams - but dont need them. Entity relationship diagrams are handy though erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses Other diagram types \u03bb\ufe0e Besides the diagram types listed above, [Mermaid.js] provides support for pie charts , gantt charts , user journeys , git graphs and requirement diagrams , all of which are not officially supported by Material for MkDocs. Those diagrams should still work as advertised by [Mermaid.js], but we don't consider them a good choice, mostly as they don't work well on mobile. Formatting \u03bb\ufe0e Keyboard keys for all those key bindings... each number and alphabet character has their own key Space or Space for leader and , for local leader Punctionation keys by name, e.g. | Left + Up + Down + Right Meta + X for all the classic Emacs fun Ctrl + Alt + Del Grids \u03bb\ufe0e Useful for putting button links on the main page as quick links into the key parts of the book HTML for content and structure JavaScript for interactivity CSS for text running out of boxes Internet Explorer ... huh? Sponsor only feature Images \u03bb\ufe0e Oh yesssss... aligning images... I am in love... and lazy loading too Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. If the image is too big then it will simply take up the whole width of the page When adding the color pallet toggle , have different images for light and dark Lists \u03bb\ufe0e Task lists Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Tooltips \u03bb\ufe0e The humble tool tip Hover me with references Hover me Icon tool tip with a title Abreviations \u03bb\ufe0e The HTML specification is maintained by the W3C. [HTML]: Hyper Text Markup Language [W3C]: World Wide Web Consortium Magic links \u03bb\ufe0e MagicLink can auto-link HTML, FTP, and email links. It can auto-convert repository links (GitHub, GitLab, and Bitbucket) and display them in a more concise, shorthand format. Email Practicalli Practicalli Neovim","title":"Writing Tips"},{"location":"introduction/writing-tips/#writing-tips-for-mkdocs","text":"Making the docs more engaging using the mkdocs-material theme reference guide","title":"Writing tips for MkDocs"},{"location":"introduction/writing-tips/#hypertext-links","text":"Links open in the same browser window/tab by default. Add {target=_blank} to the end of a link to configure opening in a new tab [ link text ]( url ){target=_blank}","title":"Hypertext links"},{"location":"introduction/writing-tips/#buttons","text":"Convert any link into a button by adding { .md-button } class names to end of the markdown for a link, which uses .md-button-primary by default. Include target=_blank for buttons with links to external sites. [link text](http://practical.li/blog){ .md-button target=_blank } Practicalli Blog Add an icon to the button with fontawsome Practicalli Issues","title":"Buttons"},{"location":"introduction/writing-tips/#youtube-video","text":"Use an iframe element to include a YouTube video, wrapping in a paragraph tag with center alignment to place the video in a centered horizontal position < p style = \"text-align:center\" > < iframe width = \"560\" height = \"315\" src = \"https://www.youtube.com/embed/rQ802kSaip4\" title = \"YouTube video player\" frameborder = \"0\" allow = \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen ></ iframe > </ p > mkdocs material does not have direct support for adding a YouTube video via markdown.","title":"YouTube video"},{"location":"introduction/writing-tips/#admonitions","text":"Supported admonition types Note Use !!! followed by NOTE Adding a title Use !!! followed by NOTE and a \"title in double quotes\" Shh, no title bar just the text... Use !!! followed by NOTE and a \"\" empty double quotes Abstract Use !!! followed by ABSTRACT Info Use !!! followed by INFO Tip Use !!! followed by TIP Success Use !!! followed by SUCCESS Question Use !!! followed by QUESTION Warning Use !!! followed by WARNING Failure Use !!! followed by FAILURE Danger Use !!! followed by DANGER Bug Use !!! followed by BUG Example Use !!! followed by EXAMPLE Quote Use !!! followed by QUOTE","title":"Admonitions"},{"location":"introduction/writing-tips/#collapsing-admonitions","text":"Note Collapse those admonitions using ??? instead of !!! Replace with a title Use ??? followed by NOTE and a \"title in double quotes\" Expanded by default Use ???+ , note the + character, followed by NOTE and a \"title in double quotes\"","title":"Collapsing admonitions"},{"location":"introduction/writing-tips/#inline-blocks","text":"Inline blocks of text to make a very specific callout within text Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Adding something to then end of text is probably my favourite Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Inline blocks"},{"location":"introduction/writing-tips/#code-blocks","text":"Code blocks include a copy icon automatically Syntax highlighting in code blocks ( defn my-function ; Write a simple function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ])) Give the code block a title using title=\"\" after the backtics and language name src/practicalli/gameboard.clj ( defn my-function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ])) We all like line numbers, especially when you can set the starting line src/practicalli/gameboard.clj 42 43 44 45 ( defn my-function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ])) Add linenums=42 to start line numbers from 42 onward clojure linenums=\"42\" title=\"src/practicalli/gameboard.clj\"","title":"Code blocks"},{"location":"introduction/writing-tips/#annotations","text":"Add an annotation using # (1) where 1 is the number of the annotation ls -la $HOME /Downloads # (1) 1. :woman_raising_hand: I'm a code annotation! I can contain `code`, __formatted text__, images, ... basically anything that can be written in Markdown. Code blocks with annotation, add ! after the annotation number to suppress the # character ( defn helper-function \"Doc-string with description of function purpose\" ; (1)! [ data ] ( merge { :fish 1 } data ) ) 1. Always include a doc-string in every function to describe the purpose of that function, identifying why it was added and what its value is. GitHub action example with multiple annotations GitHub action example with multiple annotations name : ci # (1)! on : push : branches : - master # (2)! - main permissions : contents : write jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v3 - uses : actions/setup-python@v4 with : python-version : 3.x - run : pip install mkdocs-material # (3)! - run : mkdocs gh-deploy --force You can change the name to your liking. At some point, GitHub renamed master to main . If your default branch is named master , you can safely remove main , vice versa. This is the place to install further [MkDocs plugins] or Markdown extensions with pip to be used during the build: pip install \\ mkdocs-material \\ mkdocs-awesome-pages-plugin \\ ...","title":"Annotations"},{"location":"introduction/writing-tips/#highlight-lines-in-code-blocks","text":"hl_lines=\"2\" where 2 is the line number to highlight ( defn my-function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ]))","title":"Highlight lines in code blocks"},{"location":"introduction/writing-tips/#content-tabs","text":"Create in page tabs that can also be Setting up a project Clojure CLI Leiningen clojure -T:project/new :template app :name practicalli/gameboard lein new app practicalli/gameboard Or nest the content tabs in an admonition Run a terminal REPL Clojure CLI Leiningen clojure -T:repl/rebel lein repl","title":"Content tabs"},{"location":"introduction/writing-tips/#diagrams","text":"Neat flow diagrams graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; UML Sequence Diagrams sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! state transition diagrams stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] Class diagrams - but dont need them. Entity relationship diagrams are handy though erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses","title":"Diagrams"},{"location":"introduction/writing-tips/#other-diagram-types","text":"Besides the diagram types listed above, [Mermaid.js] provides support for pie charts , gantt charts , user journeys , git graphs and requirement diagrams , all of which are not officially supported by Material for MkDocs. Those diagrams should still work as advertised by [Mermaid.js], but we don't consider them a good choice, mostly as they don't work well on mobile.","title":"Other diagram types"},{"location":"introduction/writing-tips/#formatting","text":"Keyboard keys for all those key bindings... each number and alphabet character has their own key Space or Space for leader and , for local leader Punctionation keys by name, e.g. | Left + Up + Down + Right Meta + X for all the classic Emacs fun Ctrl + Alt + Del","title":"Formatting"},{"location":"introduction/writing-tips/#grids","text":"Useful for putting button links on the main page as quick links into the key parts of the book HTML for content and structure JavaScript for interactivity CSS for text running out of boxes Internet Explorer ... huh? Sponsor only feature","title":"Grids"},{"location":"introduction/writing-tips/#images","text":"Oh yesssss... aligning images... I am in love... and lazy loading too Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. If the image is too big then it will simply take up the whole width of the page When adding the color pallet toggle , have different images for light and dark","title":"Images"},{"location":"introduction/writing-tips/#lists","text":"Task lists Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque","title":"Lists"},{"location":"introduction/writing-tips/#tooltips","text":"The humble tool tip Hover me with references Hover me Icon tool tip with a title","title":"Tooltips"},{"location":"introduction/writing-tips/#abreviations","text":"The HTML specification is maintained by the W3C. [HTML]: Hyper Text Markup Language [W3C]: World Wide Web Consortium","title":"Abreviations"},{"location":"introduction/writing-tips/#magic-links","text":"MagicLink can auto-link HTML, FTP, and email links. It can auto-convert repository links (GitHub, GitLab, and Bitbucket) and display them in a more concise, shorthand format. Email Practicalli Practicalli Neovim","title":"Magic links"}]}